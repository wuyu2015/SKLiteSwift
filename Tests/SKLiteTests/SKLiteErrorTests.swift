import XCTest
import XCTestDelayPrinter
@testable import SKLite

final class SKLiteErrorTests: XCTestCase {
    func testPrintRawValue() {
        pr("OK: \(SKLite.errStr(SKLite.SKLiteError.OK.rawValue))")
        pr("ERROR: \(SKLite.errStr(SKLite.SKLiteError.ERROR.rawValue))")
        pr("INTERNAL: \(SKLite.errStr(SKLite.SKLiteError.INTERNAL.rawValue))")
        pr("PERM: \(SKLite.errStr(SKLite.SKLiteError.PERM.rawValue))")
        pr("ABORT: \(SKLite.errStr(SKLite.SKLiteError.ABORT.rawValue))")
        pr("BUSY: \(SKLite.errStr(SKLite.SKLiteError.BUSY.rawValue))")
        pr("LOCKED: \(SKLite.errStr(SKLite.SKLiteError.LOCKED.rawValue))")
        pr("NOMEM: \(SKLite.errStr(SKLite.SKLiteError.NOMEM.rawValue))")
        pr("READONLY: \(SKLite.errStr(SKLite.SKLiteError.READONLY.rawValue))")
        pr("INTERRUPT: \(SKLite.errStr(SKLite.SKLiteError.INTERRUPT.rawValue))")
        pr("IOERR: \(SKLite.errStr(SKLite.SKLiteError.IOERR.rawValue))")
        pr("CORRUPT: \(SKLite.errStr(SKLite.SKLiteError.CORRUPT.rawValue))")
        pr("NOTFOUND: \(SKLite.errStr(SKLite.SKLiteError.NOTFOUND.rawValue))")
        pr("FULL: \(SKLite.errStr(SKLite.SKLiteError.FULL.rawValue))")
        pr("CANTOPEN: \(SKLite.errStr(SKLite.SKLiteError.CANTOPEN.rawValue))")
        pr("PROTOCOL: \(SKLite.errStr(SKLite.SKLiteError.PROTOCOL.rawValue))")
        pr("EMPTY: \(SKLite.errStr(SKLite.SKLiteError.EMPTY.rawValue))")
        pr("SCHEMA: \(SKLite.errStr(SKLite.SKLiteError.SCHEMA.rawValue))")
        pr("TOOBIG: \(SKLite.errStr(SKLite.SKLiteError.TOOBIG.rawValue))")
        pr("CONSTRAINT: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT.rawValue))")
        pr("MISMATCH: \(SKLite.errStr(SKLite.SKLiteError.MISMATCH.rawValue))")
        pr("MISUSE: \(SKLite.errStr(SKLite.SKLiteError.MISUSE.rawValue))")
        pr("NOLFS: \(SKLite.errStr(SKLite.SKLiteError.NOLFS.rawValue))")
        pr("AUTH: \(SKLite.errStr(SKLite.SKLiteError.AUTH.rawValue))")
        pr("FORMAT: \(SKLite.errStr(SKLite.SKLiteError.FORMAT.rawValue))")
        pr("RANGE: \(SKLite.errStr(SKLite.SKLiteError.RANGE.rawValue))")
        pr("NOTADB: \(SKLite.errStr(SKLite.SKLiteError.NOTADB.rawValue))")
        pr("NOTICE: \(SKLite.errStr(SKLite.SKLiteError.NOTICE.rawValue))")
        pr("WARNING: \(SKLite.errStr(SKLite.SKLiteError.WARNING.rawValue))")
        pr("ROW: \(SKLite.errStr(SKLite.SKLiteError.ROW.rawValue))")
        pr("DONE: \(SKLite.errStr(SKLite.SKLiteError.DONE.rawValue))")
        pr("ERROR_MISSING_COLLSEQ: \(SKLite.errStr(SKLite.SKLiteError.ERROR_MISSING_COLLSEQ.rawValue))")
        pr("ERROR_RETRY: \(SKLite.errStr(SKLite.SKLiteError.ERROR_RETRY.rawValue))")
        pr("ERROR_SNAPSHOT: \(SKLite.errStr(SKLite.SKLiteError.ERROR_SNAPSHOT.rawValue))")
        pr("IOERR_READ: \(SKLite.errStr(SKLite.SKLiteError.IOERR_READ.rawValue))")
        pr("IOERR_SHORT_READ: \(SKLite.errStr(SKLite.SKLiteError.IOERR_SHORT_READ.rawValue))")
        pr("IOERR_WRITE: \(SKLite.errStr(SKLite.SKLiteError.IOERR_WRITE.rawValue))")
        pr("IOERR_FSYNC: \(SKLite.errStr(SKLite.SKLiteError.IOERR_FSYNC.rawValue))")
        pr("IOERR_DIR_FSYNC: \(SKLite.errStr(SKLite.SKLiteError.IOERR_DIR_FSYNC.rawValue))")
        pr("IOERR_TRUNCATE: \(SKLite.errStr(SKLite.SKLiteError.IOERR_TRUNCATE.rawValue))")
        pr("IOERR_FSTAT: \(SKLite.errStr(SKLite.SKLiteError.IOERR_FSTAT.rawValue))")
        pr("IOERR_UNLOCK: \(SKLite.errStr(SKLite.SKLiteError.IOERR_UNLOCK.rawValue))")
        pr("IOERR_RDLOCK: \(SKLite.errStr(SKLite.SKLiteError.IOERR_RDLOCK.rawValue))")
        pr("IOERR_DELETE: \(SKLite.errStr(SKLite.SKLiteError.IOERR_DELETE.rawValue))")
        pr("IOERR_BLOCKED: \(SKLite.errStr(SKLite.SKLiteError.IOERR_BLOCKED.rawValue))")
        pr("IOERR_NOMEM: \(SKLite.errStr(SKLite.SKLiteError.IOERR_NOMEM.rawValue))")
        pr("IOERR_ACCESS: \(SKLite.errStr(SKLite.SKLiteError.IOERR_ACCESS.rawValue))")
        pr("IOERR_CHECKRESERVEDLOCK: \(SKLite.errStr(SKLite.SKLiteError.IOERR_CHECKRESERVEDLOCK.rawValue))")
        pr("IOERR_LOCK: \(SKLite.errStr(SKLite.SKLiteError.IOERR_LOCK.rawValue))")
        pr("IOERR_CLOSE: \(SKLite.errStr(SKLite.SKLiteError.IOERR_CLOSE.rawValue))")
        pr("IOERR_DIR_CLOSE: \(SKLite.errStr(SKLite.SKLiteError.IOERR_DIR_CLOSE.rawValue))")
        pr("IOERR_SHMOPEN: \(SKLite.errStr(SKLite.SKLiteError.IOERR_SHMOPEN.rawValue))")
        pr("IOERR_SHMSIZE: \(SKLite.errStr(SKLite.SKLiteError.IOERR_SHMSIZE.rawValue))")
        pr("IOERR_SHMLOCK: \(SKLite.errStr(SKLite.SKLiteError.IOERR_SHMLOCK.rawValue))")
        pr("IOERR_SHMMAP: \(SKLite.errStr(SKLite.SKLiteError.IOERR_SHMMAP.rawValue))")
        pr("IOERR_SEEK: \(SKLite.errStr(SKLite.SKLiteError.IOERR_SEEK.rawValue))")
        pr("IOERR_DELETE_NOENT: \(SKLite.errStr(SKLite.SKLiteError.IOERR_DELETE_NOENT.rawValue))")
        pr("IOERR_MMAP: \(SKLite.errStr(SKLite.SKLiteError.IOERR_MMAP.rawValue))")
        pr("IOERR_GETTEMPPATH: \(SKLite.errStr(SKLite.SKLiteError.IOERR_GETTEMPPATH.rawValue))")
        pr("IOERR_CONVPATH: \(SKLite.errStr(SKLite.SKLiteError.IOERR_CONVPATH.rawValue))")
        pr("IOERR_VNODE: \(SKLite.errStr(SKLite.SKLiteError.IOERR_VNODE.rawValue))")
        pr("IOERR_AUTH: \(SKLite.errStr(SKLite.SKLiteError.IOERR_AUTH.rawValue))")
        pr("IOERR_BEGIN_ATOMIC: \(SKLite.errStr(SKLite.SKLiteError.IOERR_BEGIN_ATOMIC.rawValue))")
        pr("IOERR_COMMIT_ATOMIC: \(SKLite.errStr(SKLite.SKLiteError.IOERR_COMMIT_ATOMIC.rawValue))")
        pr("IOERR_ROLLBACK_ATOMIC: \(SKLite.errStr(SKLite.SKLiteError.IOERR_ROLLBACK_ATOMIC.rawValue))")
        pr("IOERR_DATA: \(SKLite.errStr(SKLite.SKLiteError.IOERR_DATA.rawValue))")
        pr("IOERR_CORRUPTFS: \(SKLite.errStr(SKLite.SKLiteError.IOERR_CORRUPTFS.rawValue))")
        pr("LOCKED_SHAREDCACHE: \(SKLite.errStr(SKLite.SKLiteError.LOCKED_SHAREDCACHE.rawValue))")
        pr("LOCKED_VTAB: \(SKLite.errStr(SKLite.SKLiteError.LOCKED_VTAB.rawValue))")
        pr("BUSY_RECOVERY: \(SKLite.errStr(SKLite.SKLiteError.BUSY_RECOVERY.rawValue))")
        pr("BUSY_SNAPSHOT: \(SKLite.errStr(SKLite.SKLiteError.BUSY_SNAPSHOT.rawValue))")
        pr("BUSY_TIMEOUT: \(SKLite.errStr(SKLite.SKLiteError.BUSY_TIMEOUT.rawValue))")
        pr("CANTOPEN_NOTEMPDIR: \(SKLite.errStr(SKLite.SKLiteError.CANTOPEN_NOTEMPDIR.rawValue))")
        pr("CANTOPEN_ISDIR: \(SKLite.errStr(SKLite.SKLiteError.CANTOPEN_ISDIR.rawValue))")
        pr("CANTOPEN_FULLPATH: \(SKLite.errStr(SKLite.SKLiteError.CANTOPEN_FULLPATH.rawValue))")
        pr("CANTOPEN_CONVPATH: \(SKLite.errStr(SKLite.SKLiteError.CANTOPEN_CONVPATH.rawValue))")
        pr("CANTOPEN_DIRTYWAL: \(SKLite.errStr(SKLite.SKLiteError.CANTOPEN_DIRTYWAL.rawValue))")
        pr("CANTOPEN_SYMLINK: \(SKLite.errStr(SKLite.SKLiteError.CANTOPEN_SYMLINK.rawValue))")
        pr("CORRUPT_VTAB: \(SKLite.errStr(SKLite.SKLiteError.CORRUPT_VTAB.rawValue))")
        pr("CORRUPT_SEQUENCE: \(SKLite.errStr(SKLite.SKLiteError.CORRUPT_SEQUENCE.rawValue))")
        pr("CORRUPT_INDEX: \(SKLite.errStr(SKLite.SKLiteError.CORRUPT_INDEX.rawValue))")
        pr("READONLY_RECOVERY: \(SKLite.errStr(SKLite.SKLiteError.READONLY_RECOVERY.rawValue))")
        pr("READONLY_CANTLOCK: \(SKLite.errStr(SKLite.SKLiteError.READONLY_CANTLOCK.rawValue))")
        pr("READONLY_ROLLBACK: \(SKLite.errStr(SKLite.SKLiteError.READONLY_ROLLBACK.rawValue))")
        pr("READONLY_DBMOVED: \(SKLite.errStr(SKLite.SKLiteError.READONLY_DBMOVED.rawValue))")
        pr("READONLY_CANTINIT: \(SKLite.errStr(SKLite.SKLiteError.READONLY_CANTINIT.rawValue))")
        pr("READONLY_DIRECTORY: \(SKLite.errStr(SKLite.SKLiteError.READONLY_DIRECTORY.rawValue))")
        pr("ABORT_ROLLBACK: \(SKLite.errStr(SKLite.SKLiteError.ABORT_ROLLBACK.rawValue))")
        pr("CONSTRAINT_CHECK: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_CHECK.rawValue))")
        pr("CONSTRAINT_COMMITHOOK: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_COMMITHOOK.rawValue))")
        pr("CONSTRAINT_FOREIGNKEY: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_FOREIGNKEY.rawValue))")
        pr("CONSTRAINT_FUNCTION: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_FUNCTION.rawValue))")
        pr("CONSTRAINT_NOTNULL: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_NOTNULL.rawValue))")
        pr("CONSTRAINT_PRIMARYKEY: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_PRIMARYKEY.rawValue))")
        pr("CONSTRAINT_TRIGGER: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_TRIGGER.rawValue))")
        pr("CONSTRAINT_UNIQUE: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_UNIQUE.rawValue))")
        pr("CONSTRAINT_VTAB: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_VTAB.rawValue))")
        pr("CONSTRAINT_ROWID: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_ROWID.rawValue))")
        pr("CONSTRAINT_PINNED: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_PINNED.rawValue))")
        pr("CONSTRAINT_DATATYPE: \(SKLite.errStr(SKLite.SKLiteError.CONSTRAINT_DATATYPE.rawValue))")
        pr("NOTICE_RECOVER_WAL: \(SKLite.errStr(SKLite.SKLiteError.NOTICE_RECOVER_WAL.rawValue))")
        pr("NOTICE_RECOVER_ROLLBACK: \(SKLite.errStr(SKLite.SKLiteError.NOTICE_RECOVER_ROLLBACK.rawValue))")
        pr("WARNING_AUTOINDEX: \(SKLite.errStr(SKLite.SKLiteError.WARNING_AUTOINDEX.rawValue))")
        pr("AUTH_USER: \(SKLite.errStr(SKLite.SKLiteError.AUTH_USER.rawValue))")
        pr("OK_LOAD_PERMANENTLY: \(SKLite.errStr(SKLite.SKLiteError.OK_LOAD_PERMANENTLY.rawValue))")
    }
}
